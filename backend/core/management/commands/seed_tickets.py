from django.core.management.base import BaseCommand
from django.utils import timezone
from core.models import Ticket, Employee
import random
from datetime import datetime, timedelta
from decimal import Decimal, ROUND_HALF_UP

CATEGORY_CHOICES = [
    'IT Support', 'Asset Check In', 'Asset Check Out', 'New Budget Proposal', 'Others'
]

IT_SUBCATS = [
    'Technical Assistance',
    'Software Installation/Update',
    'Hardware Troubleshooting',
    'Email/Account Access Issue',
    'Internet/Network Connectivity Issue',
    'Printer/Scanner Setup or Issue',
    'System Performance Issue',
    'Virus/Malware Check',
    'IT Consultation Request',
    'Data Backup/Restore',
]

DEVICE_TYPES = ['Laptop', 'Printer', 'Projector', 'Monitor', 'Other']

ASSET_NAMES = {
    'Laptop': ['Dell Latitude 5420', 'HP ProBook 450 G9', 'Lenovo ThinkPad X1'],
    'Printer': ['HP LaserJet Pro M404dn', 'Canon imageCLASS MF445dw'],
    'Projector': ['Epson PowerLite 2247U', 'BenQ MH535A'],
    'Mouse': ['Logitech MX Master 3', 'Microsoft Surface Mouse'],
    'Keyboard': ['Logitech K380', 'Microsoft Ergonomic Keyboard'],
}

LOCATIONS = [
    'Main Office - 1st Floor',
    'Main Office - 2nd Floor',
    'Main Office - 3rd Floor',
    'Branch Office - North',
    'Branch Office - South',
    'Warehouse',
    'Remote/Home Office',
]

SPECIFY_ISSUES = [
    'Not Functioning',
    'Missing Accessories',
    'Physical Damage',
    'Battery Issue',
    'Software Issue',
    'Screen/Display Issue',
    'Other',
]

BUDGET_SUBCATS = [
    'Capital Expenses (CapEx)',
    'Operational Expenses (OpEx)',
    'Reimbursement Claim (Liabilities)',
    'Charging Department (Cost Center)'
]

COST_ELEMENTS = {
    'Capital Expenses (CapEx)': ['Equipment', 'Software', 'Furniture'],
    'Operational Expenses (OpEx)': ['Utilities', 'Supplies', 'IT Services', 'Software Subscriptions'],
    'Reimbursement Claim (Liabilities)': ['Payable', 'Loans'],
    'Charging Department (Cost Center)': ['IT Operations', 'System Development', 'Infrastructure & Equipment', 'Training and Seminars'],
}

ESTIMATED_COSTS = [
    '₱0 - ₱10,000',
    '₱10,001 - ₱50,000',
    '₱50,001 - ₱100,000',
    '₱100,001 - ₱500,000',
    '₱500,001 - ₱1,000,000',
    '₱1,000,001 and above',
]

PRIORITIES = ['Critical', 'High', 'Medium', 'Low']

class Command(BaseCommand):
    help = 'Seed tickets according to the project rules'

    def add_arguments(self, parser):
        parser.add_argument('--count', type=int, default=150, help='Number of tickets to create')

    def handle(self, *args, **options):
        count = options['count']
        employees = list(Employee.objects.all())
        if not employees:
            self.stderr.write('No employees found to assign tickets to. Please seed employees first.')
            return

        created = 0
        for i in range(count):
            category = random.choice(CATEGORY_CHOICES)
            # choose employee first so we can reference company_id in subject
            employee = random.choice(employees)
            ticket_kwargs = {}
            # create a unique, human-friendly subject without 'Auto-generated' or '#N'
            descriptor = ''
            if category == 'IT Support':
                descriptor = random.choice(IT_SUBCATS)
            elif category in ('Asset Check In', 'Asset Check Out'):
                descriptor = random.choice(list(ASSET_NAMES.keys()))
            elif category == 'New Budget Proposal':
                descriptor = random.choice(BUDGET_SUBCATS)
            else:
                descriptor = 'General Inquiry'

            # use timestamp to help uniqueness and readability
            subject = f"{category} - {descriptor} ({employee.company_id}) {datetime.now().strftime('%Y%m%d%H%M%S')}"
            description = f"This is a seeded ticket for {category}. Details autogenerated for testing."

            ticket_kwargs['subject'] = subject
            ticket_kwargs['description'] = description
            ticket_kwargs['employee'] = employee

            if category == 'IT Support':
                sub = random.choice(IT_SUBCATS)
                ticket_kwargs['category'] = 'IT Support'
                ticket_kwargs['sub_category'] = sub
                # device type and asset
                device = random.choice(DEVICE_TYPES)
                ticket_kwargs['dynamic_data'] = {
                    'device_type': device,
                }
                if device in ASSET_NAMES:
                    asset = random.choice(ASSET_NAMES[device])
                    ticket_kwargs['asset_name'] = asset
                    # generate serial number based on asset name
                    ticket_kwargs['serial_number'] = f"SN-{abs(hash(asset)) % 1000000:06d}"
                ticket_kwargs['department'] = 'IT Department'
                # priority
                ticket_kwargs['priority'] = random.choice(PRIORITIES) if random.random() < 0.5 else None
                ticket_kwargs['location'] = random.choice(LOCATIONS)

            elif category in ('Asset Check In', 'Asset Check Out'):
                ticket_kwargs['category'] = category
                product = random.choice(list(ASSET_NAMES.keys()))
                ticket_kwargs['sub_category'] = product
                ticket_kwargs['asset_name'] = random.choice(ASSET_NAMES.get(product, []))
                ticket_kwargs['serial_number'] = f"SN-{random.randint(100000,999999)}"
                ticket_kwargs['department'] = 'Asset Department'
                # for check out, add expected return date
                if category == 'Asset Check Out':
                    days = random.randint(1, 60)
                    exp = datetime.now() + timedelta(days=days)
                    ticket_kwargs['expected_return_date'] = exp.date()

            elif category == 'New Budget Proposal':
                ticket_kwargs['category'] = 'New Budget Proposal'
                sub = random.choice(BUDGET_SUBCATS)
                ticket_kwargs['sub_category'] = sub
                # optional cost elements
                if random.random() < 0.7:
                    ce = random.choice(COST_ELEMENTS.get(sub, []))
                    ticket_kwargs['cost_items'] = {'cost_element': ce}
                    # Ensure Decimal with two decimal places
                    val = Decimal(str(round(random.uniform(1000, 500000), 2))).quantize(Decimal('0.01'), rounding=ROUND_HALF_UP)
                    ticket_kwargs['requested_budget'] = val
                ticket_kwargs['department'] = 'Budget Department'
                # performance dates
                start = datetime.now().date()
                end = start + timedelta(days=random.randint(30, 365))
                ticket_kwargs['performance_start_date'] = start
                ticket_kwargs['performance_end_date'] = end

            else:
                ticket_kwargs['category'] = 'Others'
                ticket_kwargs['sub_category'] = None
                ticket_kwargs['department'] = None

            # statuses: New/Open/In Progress/On Hold/Pending/Resolved/Rejected/Withdrawn/Closed
            # For seeded tickets we will pick a subset including Rejected to test rejection_reason
            status_choices = ['New', 'Open', 'In Progress', 'On Hold', 'Pending', 'Resolved', 'Rejected', 'Withdrawn', 'Closed']
            ticket_kwargs['status'] = random.choice(status_choices)
            if ticket_kwargs['status'] == 'Rejected':
                ticket_kwargs['rejection_reason'] = 'Autogenerated: does not meet criteria.'

            # Ensure that if status is not 'New', the ticket has a priority and department
            if ticket_kwargs['status'] != 'New':
                # set priority if missing
                if not ticket_kwargs.get('priority'):
                    ticket_kwargs['priority'] = random.choice(PRIORITIES)
                # set department mapping based on category if missing
                if not ticket_kwargs.get('department'):
                    if ticket_kwargs['category'] == 'IT Support':
                        ticket_kwargs['department'] = 'IT Department'
                    elif ticket_kwargs['category'] in ('Asset Check In', 'Asset Check Out'):
                        ticket_kwargs['department'] = 'Asset Department'
                    elif ticket_kwargs['category'] == 'New Budget Proposal':
                        ticket_kwargs['department'] = 'Budget Department'
                    else:
                        # For 'Others' pick one of the allowed departments
                        ticket_kwargs['department'] = random.choice(['IT Department', 'Asset Department', 'Budget Department'])

            # scheduled date optional
            if random.random() < 0.3:
                ticket_kwargs['scheduled_date'] = datetime.now().date() + timedelta(days=random.randint(0, 30))

            # create the ticket
            try:
                t = Ticket(**ticket_kwargs)
                t.full_clean()
                t.save()
                created += 1
                if created % 10 == 0:
                    self.stdout.write(self.style.SUCCESS(f'Created {created} tickets'))
            except Exception as e:
                self.stderr.write(f'Failed to create ticket #{i+1}: {e}')

        self.stdout.write(self.style.SUCCESS(f'Finished creating {created} tickets'))

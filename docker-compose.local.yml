version: '3.8'

services:
  # Lightweight local setup - no PostgreSQL needed since backend uses SQLite
  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - '5672:5672'
      - '15672:15672'

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - PIP_NO_CACHE_DIR=1
    restart: unless-stopped
    depends_on:
      - rabbitmq
    ports:
      - '8000:8000'
    command: /entrypoint.sh gunicorn --bind 0.0.0.0:8000 backend.wsgi
    environment:
      # No DATABASE_URL = use SQLite automatically
      - DEBUG=True
      - DJANGO_SECRET_KEY=unsafe-local-dev-key

      # Superuser to be created by entrypoint (idempotent)
      - DJANGO_SUPERUSER_EMAIL=admin@gmail.com
      - DJANGO_SUPERUSER_USERNAME=admin
      - DJANGO_SUPERUSER_PASSWORD=password

      # Email placeholders (replace with real credentials for outgoing email)
      - EMAIL_HOST=smtp.gmail.com
      - EMAIL_PORT=587
      - EMAIL_USE_TLS=True
      - EMAIL_HOST_USER=noreply@example.com
      - EMAIL_HOST_PASSWORD=replace-me

      # Celery placeholders
      - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672/
      - CELERY_RESULT_BACKEND=rpc://

  frontend:
    build:
      context: ./frontendfolder
      dockerfile: Dockerfile
      args:
        - VITE_REACT_APP_API_URL=http://host.docker.internal:8000/api/
        - VITE_MEDIA_URL=http://host.docker.internal:8000/media/
    restart: unless-stopped
    ports:
      - '5173:80'
    depends_on:
      - backend
